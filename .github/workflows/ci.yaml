name: CI
on:
  pull_request:
    branches: [develop, master]
  push:
    branches: [develop, master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          #key: mykey
          key: nodecache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            nodecache-${{ runner.os }}-
      - name: Use NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
      - run: npm ci
      - run: npm run format:check
      - run: npm test -- --coverage
        env:
          CI: true
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage
          path: coverage
      - name: Build Project
        if: github.event_name == 'push'
        run: npm run build
      - name: Upload Build Folder
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build
      - uses: actions/download-artifact@v3
        with:
          name: code-coverage
      - uses: actions/download-artifact@v3
        if: github.event_name == 'push'
        with:
          name: build
      - name: ZIP Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage
      - name: Create a Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_TOKEN }}
      - run: npm install -g surge
      - name: Deploy to Staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: npx surge --project ./build --domain idiotic-corn.surge.sh
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
      - name: Deploy to Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx surge --project ./build --domain szalony-leniwiec.surge.sh
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
      - name: Upload Coverage Reports
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Open Issue
        #if: failure() && github.event_name == 'push'
        if: github.event_name == 'push'
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/issues \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          -d '{"title": "Automated issue for commit: ${{ github.sha }}", "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_.", "assignees": ["${{ github.event.pull_request.user.login }}]"}'

        env:
          TITLE: "Automated issue for commit: ${{ github.sha }}"
          BODY1: "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**."
          BODY2: "The commit hash was: _${{ github.sha }}_."
          ASSIGNEES: "${{ github.event.pull_request.user.login }}"
#--data '{"title": "Automated issue for commit: ${{ github.sha }}", "body": "${{ BODY1 }} \n\n ${{ BODY2 }}", "assignees": "${{ ASSIGNEES }}"}'
